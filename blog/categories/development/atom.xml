<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: development | trajectory]]></title>
  <link href="http://wasabhi.github.com/blog/categories/development/atom.xml" rel="self"/>
  <link href="http://wasabhi.github.com/"/>
  <updated>2012-01-20T21:45:59+13:00</updated>
  <id>http://wasabhi.github.com/</id>
  <author>
    <name><![CDATA[Abhinav Keswani]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Two brilliant weeks on the road]]></title>
    <link href="http://wasabhi.github.com/2011/09/Two-Weeks-On-The-Road/"/>
    <updated>2011-09-10T22:21:00+12:00</updated>
    <id>http://wasabhi.github.com/2011/09/Two-Weeks-On-The-Road</id>
    <content type="html"><![CDATA[<p>I just finished a two week trip to the US, spending most of my time in Boulder Colorado, and San Francisco.</p>

<p>Most of the time in San Francisco was spent at Dreamforce meeting with the small, but growing group of developers who build bespoke applications that integrate with Salesforce.com.  The most notable part of this experience was the chance to actually meet in person so many people who I have talked to over skype or over email, or via pull requests on github.</p>

<p>There's really no substitute to meeting people in person, and I left San Francisco that much more in tune and in touch with the community.  I missed Metallica ... yes ... but um I saw a car that sends microblogs to its owner.  Dreamforce brought home to me the scale at which things happen in the US, and the kind of engagement and enthusiasm that people show towards their vocation.</p>

<p>I then attended Rocky Mountain Ruby in Boulder, an experience that could not be more different than that of Dreamforce.  200 attendees, as opposed 45000.  A single track conference held in a lovely old theatre, as opposed to a smorgasboard of options held across multiple city blocks.  Both were fun and professionally constructive, but I really identified with and enjoyed the Ruby conference a little more.</p>

<p>Delivering a superb event, Marty Haught ran the conference really well.  We were entertained, educated, watered, beered, and fed.  A really excellent conference.</p>

<p>I have always had an affinity with Boulder, and I got to stick around for a week after the conference.  My friend Damien (friendly Frenchman based in Sydney) and I rode mountain bikes, exploring some awesome trails.  We sampled some awesome food and drank some really amazing boutique microbrew beer.  Get there, its a great town.  I am coming back for sure - perhaps to stay for a while.</p>

<p>During the week, I met with about 7 or 8 businesses that are all creating something new.  Small companies, tech startups, with a small footprint and an audacious goal.  A significant observation about Boulder is that it is full of enterprising folk.  From Celestial Seasonings Tea, to Crocs, to some of the best little tech startups around.  Oh and I believe the US atomic clock lives in Boulder...sweet.</p>

<p>Between the people, the tech, the trails, the beer, the food and the beer, I was really taken by the town.  My heartfelt thanks to those who made it such an awesome stay.  I hope that you guys will remember the dude from NZ that turned up, and know you're always welcome out our way.</p>

<p>Heading home, we made the mandatory pilgrimmage to REI (as all Antipodeans do), and visited a great friend of mine who lives near Denver.  A lovely evening of more fine company, food and you guessed it ... microbrew beer.</p>

<p>Sitting at SFO airport now, getting set to board the plane.  I'm dying to see my family - being away from them has been the toughest part of the journey, however I got to do my thing, and I reckon that our little family will be better off for it in the long term ...</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cherry picking commits with git]]></title>
    <link href="http://wasabhi.github.com/2011/02/GitCherryPicking/"/>
    <updated>2011-02-09T22:17:00+13:00</updated>
    <id>http://wasabhi.github.com/2011/02/GitCherryPicking</id>
    <content type="html"><![CDATA[<p>Today, I spent a lot of time <a href="http://www.kernel.org/pub/software/scm/git/docs/git-cherry-pick.html">cherry picking</a> my way through a bunch of commits.</p>

<p>Before explaining further - this is the scenario we were in.</p>

<ul>
<li>over about 3 weeks we've had to vendor a Ruby gem so as to modify and extend it rapidly in our Rails app</li>
<li>we've done this quickly and without tracking changes in a fork of the gem (bad!)</li>
<li>we needed to contribute all our work back to the gem maintainer but we needed to carefully group related commits, and send meaningful pull requests</li>
</ul>


<p>So, after forking the gem in question and a cheeky bit of diffing we knew the all the differences between our vendorised gem and that of the fork.</p>

<pre><code>diff -uNrw . our/app/vendor/gems/gem_name/ | less
</code></pre>

<p>We created a temp branch and applied all the diffs by simply copying over the entire gem recursively.</p>

<pre><code>git checkout -b temp
cp -r our/rails_app/vendor/gems/gem_name/ .
</code></pre>

<p>We ran all the tests in the gem, and gladly they passed, so we removed our vendor gem directory from our application - using a symbolic link instead pointing at the gem fork.  Then we ran all our tests in our application and they passed too - which is great.</p>

<p>So at this point, the gem was still in the vendor/gems directory, however this pointed to a fork of the gem where many changes had been made.</p>

<p>The next step was to commit or interactively add hunks of code from all the changes in the temp branch.</p>

<pre><code>git commit -v file
git add -i file
</code></pre>

<p>This created neatly separated commits of all changes in our temp branch.</p>

<p>Then we checked out the master branch and compared the temp branch to the HEAD revision.  This showed us clearly the differences between the two branches.</p>

<pre><code>git checkout master
git diff HEAD..temp
</code></pre>

<p>So, we've got all our commits on a temp branch and these needed to be selectively added to new branches, allowing us to logically aggregate changes, and issue pull requests to the gem's maintainer.</p>

<p>So - first up create a new branch and then we started to cherry pick.</p>

<pre><code>git checkout master
git checkout -b new_set_of_commits_for_pull_request
</code></pre>

<p>With a list of SHAs generated from all commits on the temp branch we could tell what we needed to cherry pick.</p>

<pre><code>git log --oneline temp
</code></pre>

<p>So applying these commits to a branch is easy - giving us a branch with a specified set of commits on it.</p>

<pre><code>git cherry-pick 42f169a 9068c89 750684e d5a7ac8
</code></pre>

<p>Then we push this branch, and follow github's amazing pull request procedure.</p>

<pre><code>git push origin new_set_of_commits_for_pull_request
</code></pre>

<p>Once our changes were accepted (phew!) we created a remote pointing to the gem repo, and fetched the contents.  Then we tracked all upstream changes to this gem allowing us to merge back all upstream changes into our local master branch - using an intermediate "integrate" branch to test that all merges were fast-forwards.</p>

<pre><code>git remote add gem_name &lt;insert repo&gt;
git fetch gem_name
git branch --track gem_name gem_name/master
</code></pre>

<p>Git is such a powerful SCM - it'll take me a while to get my head around the possibilities.  For me, to write the above down is really important - it helps me to remember for next time!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Technology Background: Agile web application development in an Enterprise environment]]></title>
    <link href="http://wasabhi.github.com/2011/02/Technology-Agile-Corporate/"/>
    <updated>2011-02-06T21:38:00+13:00</updated>
    <id>http://wasabhi.github.com/2011/02/Technology-Agile-Corporate</id>
    <content type="html"><![CDATA[<p>Continuing from my previous post about <a href="/2011/01/Milestones/">agile development in the corporate context</a>, I will describe the technology we used to be able to rapidly deliver web applications.
To deliver 50 web applications in a year we needed some basic structures in place:</p>

<ul>
<li>An application framework which would allow us to rapidly create and maintain web apps, with in-built flexibility given ever changing requirements</li>
<li>An underlying infrastructure that would serve 150 apps (suggesting a 3 year lifespan)</li>
<li>A modicum of secure controls over our application environment and infrastructure so as to autonomously deliver our work</li>
<li>Automation</li>
<li>More automation</li>
</ul>


<p>We chose to use the following:</p>

<ul>
<li>The <a href="http://www.symfony.org">Symfony MVC framework</a>, and somewhat confusingly, the <a href="http://seamframework.org">JBoss Seam framework</a> [1]</li>
<li><a href="http://www.redhat.com/rhel">Red Hat Enterprise Linux</a> as it was our corporate standard Linux - to create dev, test and prod environments</li>
<li><a href="http://httpd.apache.org">Apache</a>, <a href="http://www.mysql.com">MySQL</a> to round out web serving and the database of choice</li>
<li>A small arsenal of shell and perl combined with clever sudo access for non-root users to give thorough and secure control over these hosts</li>
<li>Atlassian <a href="http://www.atlassian.com/software/jira/">Jira</a> and <a href="http://www.atlassian.com/software/confluence">Confluence</a> for issue tracking and documentation respectively.</li>
<li>Atlassian <a href="http://www.atlassian.com/software/fisheye/">Fisheye</a> and <a href="http://www.atlassian.com/software/crucible/">Crucible</a> plus Subversion for development peer review and source code management respectively.</li>
<li><a href="http://socialcast.com">Socialcast</a> for inside the firewall microblogging and collaboration</li>
</ul>


<p>With all of the above, we were able to manage the delivery of an entire web application from concept to reality without the need to engage any other IT teams.  Well, that's not entirely true - we needed to create new URLs for these apps, so we'd need to request a new CNAME record which would take sometimes 2 weeks...(!!!)...</p>

<p>We quickly realised that there were common components being delivered repeatedly - such as the authentication layer in these applications needed to authenticate against Active Directory.  Or, that employee lookups were being performed against that corporate directory.  We quickly developed reusable modules of code that would allow any app to have these common functions without needing to write any code.Knowing what I know now, I would humbly suggest a few changes to the above stack - but more of that will be covered later ...</p>

<p>I discussed these structures at a recent cloudcamp in Auckland - suggesting that a PaaS approach to deployment scalable web apps would be ideal for this team, however venturing outside the firewall - especially on cloud platforms is a pretty big ask for a somewhat conservative company.</p>

<p>[1] With all due respect, we included Java in our stack just to appease a few people who felt there is no other choice for the "Enterprise"</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Milestones]]></title>
    <link href="http://wasabhi.github.com/2011/02/Milestones/"/>
    <updated>2011-02-06T21:37:00+13:00</updated>
    <id>http://wasabhi.github.com/2011/02/Milestones</id>
    <content type="html"><![CDATA[<p>For the last three years, I worked for an Australian Telco - having been a founding member of a tiny team tasked with the delivery of short, sweet web apps that can be delivered quickly, and will resolve "low hanging fruit" business problems.  The team was created to rapidly respond to smaller business problems that were often overlooked, or subject to inappropriate costs as they were forced through a large project lifecycle.</p>

<p>The idea was simple:</p>

<ol>
<li>deliver high value and incur low cost - use open source MVC framework, OS and Database (LAMP)</li>
<li>minimise overheads - one developer paired with the customer's single representative</li>
<li>focus on delivery of small scope iterations and highest quality - 4 weeks to deliver a functional application</li>
<li>charge nothing to the business for application development and hosting</li>
</ol>


<p>For a low operational cost (4 developers and 9 virtual machines running a LAMP stack), the team continues to deliver on all fronts.</p>

<p>For those interested, I have elaborated elsewhere about the <a href="/2011/02/Agile-Corporate/">business justifications</a> for this team.</p>

<p>We had three tenets:</p>

<ul>
<li>integrate with nothing - build standalone apps (exception here is the integration with the company LDAP directory for SSO)</li>
<li>never build a public facing application - your work lives on the intranet alone</li>
<li>ensure you can deliver something useful and of value in maximum 4 weeks</li>
</ul>


<p>For those interested, I have elaborated elsewhere about the <a href="/2011/02/Technology-Agile-Corporate/">technology used</a> by this team.</p>

<p>I finished my tenure with the Express Solutions team on the 27th of January, 2011.  I will miss the team, our leaders and our customers.  Three years is a long time to do the same thing, and I have decided to move on in the spirit of challenging myself to continuously improve and learn.</p>

<p>Here's a brain dump of the things I have learned.</p>

<ul>
<li>Work for engaged customers.  There is no better partner than one who is motivated to deliver something of high value.</li>
<li>Build a team of "(external) polymaths":http://en.wikipedia.org/wiki/Polymath.  People who can write great code are not enough.  They should be articulate, communicative and able to manage complex delivery.</li>
<li>Quality is everything.  A four week deliverable will never be lauded as huge success unless it works beautifully on day one.</li>
<li>Reuse is paramount.  Effort is cost - and it makes no sense to repeat your effort.</li>
<li>Remove administrative overheads.  Automate the creation of infrastructure, and empower yourself to impose change easily, safely and regularly.</li>
<li>Move fast and be smart.  Deliver something small every day if possible - especially in a 4 week life cycle.</li>
</ul>


<p>So, about a year ago, I put in place a plan that sees me take the next step in my professional career.</p>

<p>I signed up for a business partnership with a focused, motivated and very decent <a href="http://twitter.com/danfowlie">individual</a> and together we strive to do the above, and with a pretty interesting toolkit at our disposal.  More about this later...for now feel free to check out our <a href="http://trineo.co.nz">company website</a>.</p>

<p>Suffice to say - Express Solutions is a team that means a lot to me - and I respectfully single out two great mates and colleagues.  <a href="http://twitter.com/sherifmansour">eHabib</a> and <a href="http://twitter.com/jmasson">Massive</a> were my partners in the creation of the team, and I sincerely hope our paths continue to cross in many adventures.</p>

<p>Onwards...</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Business Justification: Agile web application development in an Enterprise environment]]></title>
    <link href="http://wasabhi.github.com/2011/02/Agile-Corporate/"/>
    <updated>2011-02-06T21:21:00+13:00</updated>
    <id>http://wasabhi.github.com/2011/02/Agile-Corporate</id>
    <content type="html"><![CDATA[<p>Continuing from my previous post about <a href="/2011/01/Milestones/">agile development in the corporate context</a>, I will point out the ways in which the team was structured and backed financially - in the context of the goals that were set for us.</p>

<p>Essentially, the creation of a small agile team was a PR exercise to demonstrate to business that IT still responded quickly and with quality.</p>

<p>The difficulty that we were to try to overcome was the inappropriate application of large scale project costs and timelines to smaller requests from business.  Usually, just the ramp up cost of any IT project would instantly negate the benefit of a small to medium sized business project.</p>

<p>Some essentials:</p>

<ul>
<li>We were tasked to deliver 50 web applications of varying complexity in one year.</li>
<li>The team was fully funded so we were not seeking to constantly capitalise our work.</li>
<li>The team was therefore not required to charge for our work.</li>
</ul>


<p>So the IT organisation subsidised the team's salaries, and infrastructure requirements - so as to focus exclusively on delivery as opposed to bureaucracy.</p>

<p>The other and perhaps most important aspect to all of this is that the team was backed by the CIO.  Although he set a challenging goal, he also cleared the path for us to quickly build the required infrastructure and gave us the autonomy to decide how we would achieve the goals set.  A rare and incredible opportunity for us!</p>

<p>Motivated by the need to simply add value - we built a cheap and high quality open source infrastructure, and then proceeded to meet the challenges that were set.</p>

<p>A simple example of our work would be two weeks spent building an application which would scan workloads of a provisioning team, and prompt team members when critical dates were being approached so that customer service KPI's were met.  This took 2 weeks or 10 working days to build - at a calculated expense of $10K, and saved the business $147K per annum.  This ROI calculation was based primarily on time saved on a weekly basis - not to mention the clear improvements in customer service as the provisioning team stayed on top of their work and their timely communications with customers in case of delay.
The "free" nature of the service was quickly pounced upon and some attempts were made to exploit our model.  We dealt with this by setting a maximum of 4 weeks to be spent on any deliverable.  So if we were asked to do a 6 month project for free - we would politely decline.  Usually, the cost associated with a 6 month deliverable would motivate the business to descope heavily, until they did fit within our model.  This didn't happen all the time, however when it did, the business walked away with much of their desired functionality and an actual solution as opposed to a design or concept.</p>
]]></content>
  </entry>
  
</feed>
